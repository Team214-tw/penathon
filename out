{'path': {'supports_unicode_filenames': <class 'bool'>, 'curdir': <class 'str'>, 'pardir': <class 'str'>, 'sep': <class 'str'>, 'altsep': <class 'str'>, 'extsep': <class 'str'>, 'pathsep': <class 'str'>, 'defpath': <class 'str'>, 'devnull': <class 'str'>, 'abspath': typing.Callable[[~AnyStr], ~AnyStr], 'basename': typing.Callable[[~AnyStr], ~AnyStr], 'dirname': typing.Callable[[~AnyStr], ~AnyStr], 'expanduser': typing.Callable[[~AnyStr], ~AnyStr], 'expandvars': typing.Callable[[~AnyStr], ~AnyStr], 'normcase': typing.Callable[[~AnyStr], ~AnyStr], 'normpath': typing.Callable[[~AnyStr], ~AnyStr], 'realpath': typing.Callable[[~AnyStr], ~AnyStr], 'commonpath': typing.Callable[[typing.Sequence[NoneType]], typing.Any], 'commonprefix': typing.Callable[[typing.Sequence[NoneType]], typing.Any], 'exists': typing.Callable[[typing.Union[NoneType, int]], bool], 'lexists': typing.Callable[[NoneType], bool], 'getatime': typing.Callable[[NoneType], float], 'getmtime': typing.Callable[[NoneType], float], 'getctime': typing.Callable[[NoneType], float], 'getsize': typing.Callable[[NoneType], int], 'isabs': typing.Callable[[NoneType], bool], 'isfile': typing.Callable[[NoneType], bool], 'isdir': typing.Callable[[NoneType], bool], 'islink': typing.Callable[[NoneType], bool], 'ismount': typing.Callable[[NoneType], bool], 'join': typing.Callable[[NoneType], bytes], 'relpath': typing.Callable[[NoneType, NoneType], str], 'samefile': typing.Callable[[NoneType, NoneType], bool], 'sameopenfile': typing.Callable[[int, int], bool], 'samestat': typing.Callable[[NoneType, NoneType], bool], 'split': typing.Callable[[~AnyStr], typing.Tuple[~AnyStr, ~AnyStr]], 'splitdrive': typing.Callable[[~AnyStr], typing.Tuple[~AnyStr, ~AnyStr]], 'splitext': typing.Callable[[~AnyStr], typing.Tuple[~AnyStr, ~AnyStr]], 'splitunc': typing.Callable[[~AnyStr], typing.Tuple[~AnyStr, ~AnyStr]]}, '__init__': {'supports_bytes_environ': <class 'bool'>, 'supports_dir_fd': typing.Set[typing.Callable[..., typing.Any]], 'supports_fd': typing.Set[typing.Callable[..., typing.Any]], 'supports_effective_ids': typing.Set[typing.Callable[..., typing.Any]], 'supports_follow_symlinks': typing.Set[typing.Callable[..., typing.Any]], 'RTLD_LAZY': <class 'int'>, 'RTLD_NOW': <class 'int'>, 'RTLD_GLOBAL': <class 'int'>, 'RTLD_LOCAL': <class 'int'>, 'RTLD_NODELETE': <class 'int'>, 'RTLD_NOLOAD': <class 'int'>, 'RTLD_DEEPBIND': <class 'int'>, 'SEEK_SET': <class 'int'>, 'SEEK_CUR': <class 'int'>, 'SEEK_END': <class 'int'>, 'O_RDONLY': <class 'int'>, 'O_WRONLY': <class 'int'>, 'O_RDWR': <class 'int'>, 'O_APPEND': <class 'int'>, 'O_CREAT': <class 'int'>, 'O_EXCL': <class 'int'>, 'O_TRUNC': <class 'int'>, 'O_DSYNC': <class 'int'>, 'O_RSYNC': <class 'int'>, 'O_SYNC': <class 'int'>, 'O_NDELAY': <class 'int'>, 'O_NONBLOCK': <class 'int'>, 'O_NOCTTY': <class 'int'>, 'O_CLOEXEC': <class 'int'>, 'O_SHLOCK': <class 'int'>, 'O_EXLOCK': <class 'int'>, 'O_BINARY': <class 'int'>, 'O_NOINHERIT': <class 'int'>, 'O_SHORT_LIVED': <class 'int'>, 'O_TEMPORARY': <class 'int'>, 'O_RANDOM': <class 'int'>, 'O_SEQUENTIAL': <class 'int'>, 'O_TEXT': <class 'int'>, 'O_ASYNC': <class 'int'>, 'O_DIRECT': <class 'int'>, 'O_DIRECTORY': <class 'int'>, 'O_NOFOLLOW': <class 'int'>, 'O_NOATIME': <class 'int'>, 'O_PATH': <class 'int'>, 'O_TMPFILE': <class 'int'>, 'O_LARGEFILE': <class 'int'>, 'curdir': <class 'str'>, 'pardir': <class 'str'>, 'sep': <class 'str'>, 'altsep': <class 'str'>, 'extsep': <class 'str'>, 'pathsep': <class 'str'>, 'defpath': <class 'str'>, 'linesep': <class 'str'>, 'devnull': <class 'str'>, 'name': <class 'str'>, 'F_OK': <class 'int'>, 'R_OK': <class 'int'>, 'W_OK': <class 'int'>, 'X_OK': <class 'int'>, '_Environ': {'copy': typing.Callable[[], typing.Dict[~AnyStr, ~AnyStr]], '__delitem__': typing.Callable[[~AnyStr], NoneType], '__getitem__': typing.Callable[[~AnyStr], ~AnyStr], '__setitem__': typing.Callable[[~AnyStr, ~AnyStr], NoneType], '__iter__': typing.Callable[[], typing.Iterator[~AnyStr]], '__len__': typing.Callable[[], int]}, 'environ': typing.Any, 'environb': typing.Any, 'P_NOWAIT': <class 'int'>, 'P_NOWAITO': <class 'int'>, 'P_WAIT': <class 'int'>, 'P_DETACH': <class 'int'>, 'P_OVERLAY': <class 'int'>, 'TMP_MAX': <class 'int'>, 'stat_result': {'st_mode': <class 'int'>, 'st_ino': <class 'int'>, 'st_dev': <class 'int'>, 'st_nlink': <class 'int'>, 'st_uid': <class 'int'>, 'st_gid': <class 'int'>, 'st_size': <class 'int'>, 'st_atime': <class 'float'>, 'st_mtime': <class 'float'>, 'st_ctime': <class 'float'>, 'st_atime_ns': <class 'int'>, 'st_mtime_ns': <class 'int'>, 'st_ctime_ns': <class 'int'>, '__getitem__': typing.Callable[[int], int], '__init__': typing.Callable[[typing.Tuple[int, ...]], NoneType], 'st_blocks': <class 'int'>, 'st_blksize': <class 'int'>, 'st_rdev': <class 'int'>, 'st_flags': <class 'int'>, 'st_gen': <class 'int'>, 'st_birthtime': <class 'int'>, 'st_rsize': <class 'int'>, 'st_creator': <class 'int'>, 'st_type': <class 'int'>}, 'DirEntry': {'name': ~AnyStr, 'path': ~AnyStr, 'inode': typing.Callable[[], int], 'is_dir': typing.Callable[[], bool], 'is_file': typing.Callable[[], bool], 'is_symlink': typing.Callable[[], bool], 'stat': typing.Callable[[], typing.Any], '__fspath__': typing.Callable[[], ~AnyStr]}, 'fsencode': typing.Callable[[typing.Union[str, bytes, typing.Any]], bytes], 'fsdecode': typing.Callable[[typing.Union[str, bytes, typing.Any]], str], 'fspath': typing.Callable[[typing.Any], typing.Any], 'get_exec_path': typing.Callable[[typing.Union[typing.Mapping[str, str], NoneType]], typing.List[str]], 'getlogin': typing.Callable[[], str], 'getpid': typing.Callable[[], int], 'getppid': typing.Callable[[], int], 'strerror': typing.Callable[[int], str], 'umask': typing.Callable[[int], int], 'getenv': typing.Callable[[str, ~_T], typing.Union[str, ~_T]], 'getenvb': typing.Callable[[bytes, ~_T], typing.Union[bytes, ~_T]], 'putenv': typing.Callable[[typing.Union[bytes, str], typing.Union[bytes, str]], NoneType], 'unsetenv': typing.Callable[[typing.Union[bytes, str]], NoneType], 'fdopen': typing.Callable[[int, str, int, typing.Union[str, NoneType], str, str, bool], typing.Any], 'close': typing.Callable[[int], NoneType], 'closerange': typing.Callable[[int, int], NoneType], 'device_encoding': typing.Callable[[int], typing.Union[str, NoneType]], 'dup': typing.Callable[[int], int], 'dup2': typing.Callable[[int, int, bool], int], 'fstat': typing.Callable[[int], typing.Any], 'fsync': typing.Callable[[int], NoneType], 'lseek': typing.Callable[[int, int, int], int], 'open': typing.Callable[[ForwardRef('_PathType'), int, int], int], 'pipe': typing.Callable[[], typing.Tuple[int, int]], 'read': typing.Callable[[int, int], bytes], 'terminal_size': {'columns': <class 'int'>, 'lines': <class 'int'>}, 'get_terminal_size': typing.Callable[[int], typing.Any], 'get_inheritable': typing.Callable[[int], bool], 'set_inheritable': typing.Callable[[int, bool], NoneType], 'write': typing.Callable[[int, bytes], int], 'access': typing.Callable[[NoneType, int], bool], 'chdir': typing.Callable[[NoneType], NoneType], 'fchdir': typing.Callable[[int], NoneType], 'getcwd': typing.Callable[[], str], 'getcwdb': typing.Callable[[], bytes], 'chmod': typing.Callable[[NoneType, int], NoneType], 'link': typing.Callable[[ForwardRef('_PathType'), ForwardRef('_PathType')], NoneType], 'lstat': typing.Callable[[ForwardRef('_PathType')], typing.Any], 'mkdir': typing.Callable[[ForwardRef('_PathType'), int], NoneType], 'makedirs': typing.Callable[[ForwardRef('_PathType'), int, bool], NoneType], 'mknod': typing.Callable[[ForwardRef('_PathType'), int, int], NoneType], 'major': typing.Callable[[int], int], 'minor': typing.Callable[[int], int], 'makedev': typing.Callable[[int, int], int], 'readlink': typing.Callable[[typing.Union[~AnyStr, typing.Any]], ~AnyStr], 'remove': typing.Callable[[ForwardRef('_PathType')], NoneType], 'removedirs': typing.Callable[[ForwardRef('_PathType')], NoneType], 'rename': typing.Callable[[ForwardRef('_PathType'), ForwardRef('_PathType')], NoneType], 'renames': typing.Callable[[ForwardRef('_PathType'), ForwardRef('_PathType')], NoneType], 'replace': typing.Callable[[ForwardRef('_PathType'), ForwardRef('_PathType')], NoneType], 'rmdir': typing.Callable[[ForwardRef('_PathType')], NoneType], '_ScandirIterator': {'__next__': typing.Callable[[], typing.Any], 'close': typing.Callable[[], NoneType]}, 'scandir': typing.Callable[[typing.Union[~AnyStr, typing.Any]], typing.Any], 'stat': typing.Callable[[NoneType], typing.Any], 'symlink': typing.Callable[[ForwardRef('_PathType'), ForwardRef('_PathType'), bool], NoneType], 'truncate': typing.Callable[[NoneType, int], NoneType], 'unlink': typing.Callable[[ForwardRef('_PathType')], NoneType], 'utime': typing.Callable[[NoneType, typing.Union[typing.Tuple[int, int], typing.Tuple[float, float], NoneType]], NoneType], 'walk': typing.Callable[[typing.Union[~AnyStr, typing.Any], bool, NoneType, bool], typing.Iterator[typing.Tuple[~AnyStr, typing.List[~AnyStr], typing.List[~AnyStr]]]], 'abort': typing.Callable[[], typing.NoReturn], 'execl': typing.Callable[[ForwardRef('_PathType'), typing.Union[bytes, str]], typing.NoReturn], 'execlp': typing.Callable[[ForwardRef('_PathType'), typing.Union[bytes, str]], typing.NoReturn], 'execle': typing.Callable[[ForwardRef('_PathType'), typing.Union[bytes, str]], typing.NoReturn], 'execlpe': typing.Callable[[ForwardRef('_PathType'), typing.Union[bytes, str]], typing.NoReturn], 'execv': typing.Callable[[ForwardRef('_PathType'), NoneType], typing.NoReturn], 'execve': typing.Callable[[NoneType, NoneType, NoneType], typing.NoReturn], 'execvp': typing.Callable[[ForwardRef('_PathType'), NoneType], typing.NoReturn], 'execvpe': typing.Callable[[ForwardRef('_PathType'), NoneType, NoneType], typing.NoReturn], '_exit': typing.Callable[[int], typing.NoReturn], 'kill': typing.Callable[[int, int], NoneType], '_wrap_close': {'close': typing.Callable[[], typing.Union[int, NoneType]]}, 'popen': typing.Callable[[str, str, int], typing.Any], 'spawnl': typing.Callable[[int, ForwardRef('_PathType'), typing.Union[bytes, str]], int], 'spawnle': typing.Callable[[int, ForwardRef('_PathType'), typing.Union[bytes, str]], int], 'spawnv': typing.Callable[[int, ForwardRef('_PathType'), typing.List[typing.Union[bytes, str]]], int], 'spawnve': typing.Callable[[int, ForwardRef('_PathType'), typing.List[typing.Union[bytes, str]], NoneType], int], 'system': typing.Callable[[ForwardRef('_PathType')], int], 'times': typing.Callable[[], typing.Any], 'waitpid': typing.Callable[[int, int], typing.Tuple[int, int]], 'startfile': typing.Callable[[ForwardRef('_PathType'), typing.Union[str, NoneType]], NoneType], 'cpu_count': typing.Callable[[], typing.Union[int, NoneType]], 'urandom': typing.Callable[[int], bytes], 'register_at_fork': typing.Callable[[], NoneType], '_AddedDllDirectory': {'path': typing.Union[str, NoneType], 'close': typing.Callable[[], NoneType], '__enter__': typing.Callable[[], ~_T], '__exit__': typing.Callable[[], NoneType]}, 'add_dll_directory': typing.Callable[[str], typing.Any]}}
